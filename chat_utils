from mistral_api import generate_mistral_response

def retrieve_passages(query, collection, top_k=7):
    print(f"Retrieving top {top_k} passages for query: '{query}'...")
    try:
        q_emb = EMBEDDING_MODEL.encode(query)
        results = collection.query(query_embeddings=[q_emb], n_results=top_k)
        print("Passage retrieval completed.")
        flat_docs = []
        for doc_group in results['documents']:
            if isinstance(doc_group, list):
                flat_docs.extend(doc_group)
            else:
                flat_docs.append(doc_group)
        return flat_docs
    except Exception as e:
        print(f"Error in passage retrieval: {e}")
        return []

def ask_mistral(query, context_passages):
    combined_context = "\n".join(context_passages[:7])
    prompt = (
        f"You are an expert in education. Based on the following context, answer the question clearly and concisely:\n\n"
        f"Context:\n{combined_context}\n\n"
        f"Question: {query}\n\nAnswer:"
    )
    return generate_mistral_response(prompt)

def save_chat_log(query, answer, log_directory="chat_logs", log_filename="chat_history.md"):
    log_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), log_directory)
    os.makedirs(log_dir, exist_ok=True)
    file_path = os.path.join(log_dir, log_filename)
    try:
        with open(file_path, "a", encoding="utf-8") as f:
            f.write(f"### User:\n{query}\n\n### Assistant:\n{answer}\n\n---\n")
        print("[âœ…] Chat log saved successfully.")
    except PermissionError:
        print(f"Error: Insufficient file permissions to write to {file_path}.")
    except IOError as e:
        print(f"An I/O error occurred while saving chat log: {e}")
    except Exception as e:
        print(f"An unexpected error occurred while saving chat log: {e}")
